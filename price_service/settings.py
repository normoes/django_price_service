"""
Django settings for price_service project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

import environ

env = environ.Env(
    DOCKER_ENV=(bool, False),
    DRY_RUN=(bool, False),
    DEBUG=(bool, False),
    DJANGO_LOG_FORMATTER=(str, "verbose"),
    DJANGO_LOG_LEVEL=(str, "INFO"),
    DJANGO_LOG_PATH=(str, "/tmp"),
    DJANGO_LOGGER_NAME=(str, "price_service"),
    DATABASE_URL_DEFAULT=(str, "sqlite://"),
    SECRET_KEY=(
        str,
        "django-insecure-(yk@-=yrm!ru7ju^$$4kva*oeuedk+$4h6)dq(kl1x%dxvxmc8",
    ),
    ALLOWED_HOSTS=(list, [".example.com"]),
    STATIC_ROOT=(str, "/tmp/static/"),
    CELERY_BROKER_USER=(str, "user"),
    CELERY_BROKER_PASSWORD=(str, ""),
    CELERY_BROKER_VHOST=(str, "/price_service"),
    CELERY_BROKER_HOST=(str, "rabbitmq:5672"),
    RESPONSE_WAIT_TIME=(int, 1),
    ALPHAVANTAGE_API_KEY=(str, ""),
    ALPHAVANTAGE_HOST=(str, ""),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DRY_RUN = env("DRY_RUN")
DEBUG = env("DEBUG")
DJANGO_LOG_FORMATTER = env("DJANGO_LOG_FORMATTER")
DJANGO_LOG_LEVEL = env("DJANGO_LOG_LEVEL")
DJANGO_LOG_PATH = env("DJANGO_LOG_PATH")
DJANGO_LOGGER_NAME = env("DJANGO_LOGGER_NAME")


ALLOWED_HOSTS = env("ALLOWED_HOSTS")


ALPHAVANTAGE_DATA = {"API_KEY": env("ALPHAVANTAGE_API_KEY"), "HOST": env("ALPHAVANTAGE_HOST")}

# Value in `hours`.
RESPONSE_WAIT_TIME = env("RESPONSE_WAIT_TIME")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    # custom apps
    "price_service_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "price_service.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "price_service.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": env.db("DATABASE_URL_DEFAULT")
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = env("STATIC_ROOT")
STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s - %(name)s [%(levelname)s] - %(module)s %(process)d %(thread)d - %(pathname)s [line: %(lineno)s]: method: %(funcName)s - %(message)s",
        },
        "simple": {
            "format": "%(asctime)s - %(name)s [%(levelname)s] - %(pathname)s [line: %(lineno)s]: method: %(funcName)s - %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": DJANGO_LOG_LEVEL,
            "formatter": DJANGO_LOG_FORMATTER,
            "filters": [],
        },
        "file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 5,
            "filename": os.path.join(DJANGO_LOG_PATH, f"{DJANGO_LOGGER_NAME}.log"),
            "formatter": DJANGO_LOG_FORMATTER,
            "level": DJANGO_LOG_LEVEL,
            "utc": True,
        },
    },
    "loggers": {
        "": {
            "level": "INFO",
            "propagate": True,
            "handlers": ["console", "file"],
            "filters": [],
        },
        "celery": {
            "handlers": ["console", "file"],
            "level": DJANGO_LOG_LEVEL,
        },
        "pika": {
            "handlers": ["console", "file"],
            "level": "ERROR",
        },
        "price_service_api": {
            "handlers": ["console", "file"],
            "propagate": False,
            "level": DJANGO_LOG_LEVEL,
        },
        "django.request": {
            "handlers": ["console", "file"],
            "propagate": False,
            "level": "ERROR",
        },
    },
}

# CELERY
BROKER_URL = f'amqp://{env("CELERY_BROKER_USER")}:{env("CELERY_BROKER_PASSWORD")}@{env("CELERY_BROKER_HOST")}/{env("CELERY_BROKER_VHOST")}'
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# AUTHENTICATION
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

LOGIN_REDIRECT_URL = "/api/v1/quotes/"
